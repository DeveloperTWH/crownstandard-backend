Perfect! Let’s outline the **complete payout flow architecture** showing how all the files, queues, retries, and dispute handling interact. I’ll explain it step by step so it’s easy to follow.

---

# **Payout Flow Architecture**

### **1. Triggering Payout**

* **Trigger**: A booking is marked as `completed` and passes eligibility checks (no open dispute blocking payout, 48h delay completed).
* **File**: `payoutService.js`
* **Actions**:

  1. Calculate **provider share + tip** (if tip exists).
  2. Create a **Payout record** in DB with status `scheduled`.
  3. Call `payoutPublisher.js` to **publish an event** to EventBridge.

---

### **2. Event Publishing**

* **File**: `payoutPublisher.js`
* **Actions**:

  1. Publish a **payout event** (bookingId, payoutId, amount, currency, providerId) to **AWS EventBridge**.
  2. EventBridge routes it to **SQS queue** for processing.

---

### **3. Payout Processing (Consumer)**

* **File**: `payoutConsumer.js`
* **Actions**:

  1. Consume messages from **SQS queue**.
  2. Check if payout is **eligible**:

     * Booking completed ✅
     * No unresolved disputes ✅
  3. Call `stripeClient.js` to **execute Stripe transfer** (provider + tip combined).
  4. Update **Payout record**:

     * `transferredAt` timestamp
     * `status = transferred`
  5. Call `auditService.js` to log **success/failure**.

---

### **4. Retry Logic**

* **File**: `retryHandler.js`
* **Scenario**: Stripe transfer fails (network, insufficient funds, temporary issue).
* **Actions**:

  1. Increment `attempts` on Payout record.
  2. Retry up to **max retries (3)**.
  3. After max retries:

     * Mark `status = failed`
     * Log in AuditLog
     * Optionally notify admins via dashboard/email.

---

### **5. Dispute Handling**

* **File**: `disputeService.js`
* **Scenario**: A dispute is opened for a booking or tip.
* **Actions**:

  1. If payout is **already scheduled** but dispute is open:

     * **Hold payout** (`status = on_hold`)
     * Add `holdReason = "Dispute Open"`
     * Audit log entry
  2. When dispute is resolved:

     * If **partial refund**: adjust **provider payout** accordingly

       * Payout = providerShare + tip – refundedAmount
     * Update Payout record and **release funds** via `payoutConsumer.js`
     * Audit log entry

---

### **6. Tip Handling**

* **File**: `tipService.js`
* **Logic**:

  1. Tip is combined with provider share payout.
  2. If tip payment fails, retry along with the booking payout.
  3. If tip is refunded due to dispute, adjust provider payout accordingly.

---

### **7. Admin Overrides**

* **File**: `payoutController.js`
* **Scenario**: Special cases where manual intervention is needed.
* **Actions**:

  1. Admin can **force release** or **cancel payout**.
  2. Audit log entry is generated.

---

### **8. Audit Logging**

* **File**: `auditService.js`
* **Always log**:

  * Payout scheduled
  * Payout transferred successfully
  * Payout failed/retried
  * Payout on hold due to dispute
  * Manual override

---

### **9. Timing & Eligibility**

* **Checks** (in `dateUtils.js` / `payoutService.js`):

  * Booking `completedAt + 48h` ✅
  * Tip added within 24h window ✅
  * Dispute resolved ✅

---

### **10. Event Flow Diagram (Text Version)**

```
[Booking Completed] 
        |
        v
[payoutService.js] --> calculate payout, create Payout record
        |
        v
[payoutPublisher.js] --> EventBridge --> SQS
        |
        v
[payoutConsumer.js] --> call stripeClient.js
        |                  |
   success | failure       |
        |                  v
        v             [retryHandler.js] --> retry 3 times
    Update Payout status (transferred/failed)
        |
        v
[auditService.js] --> log all actions
```

**Dispute Handling Integration**:

```
[Dispute Opened] --> payoutService.js sets Payout on_hold
        |
[Dispute Resolved] --> payoutService.js adjusts payout, releases funds
        |
[auditService.js] --> log release and adjustments
```

---

### **Summary of Flow**

1. Booking completed → payout scheduled (payoutService)
2. Event published to EventBridge → SQS → payoutConsumer
3. Stripe transfer executed → success/failure → retry if needed
4. Tip combined in same payout → handled together
5. Dispute blocks or adjusts payout → automatically released after resolution
6. Audit logs for all steps

---

I can **start coding the first file: `payoutService.js`** next, including **eligibility checks, dispute handling, and combined tip + provider payout calculation**.

Do you want me to start coding that now?
